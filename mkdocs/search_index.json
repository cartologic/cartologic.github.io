{
    "docs": [
        {
            "location": "/", 
            "text": "Cartoview\n\n\nAbout Cartoview\n\n\nCartoview extends the popular GeoNode SDI to provide the ability to create, share, and visualize GIS Web Mapping Applications very easily and very quickly from the browser without programming.\n\n\nCartoview enables communities of users to share geospatial applications, to collaborate on these applications, and to exchange the underlying data as Open Geospatial Consortium (OGC) compliant web services\n\n\nCartoview has been built utilizing open source software and open standards to make it available for all GIS operators and to maximize interoperability.", 
            "title": "About"
        }, 
        {
            "location": "/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/#about-cartoview", 
            "text": "Cartoview extends the popular GeoNode SDI to provide the ability to create, share, and visualize GIS Web Mapping Applications very easily and very quickly from the browser without programming.  Cartoview enables communities of users to share geospatial applications, to collaborate on these applications, and to exchange the underlying data as Open Geospatial Consortium (OGC) compliant web services  Cartoview has been built utilizing open source software and open standards to make it available for all GIS operators and to maximize interoperability.", 
            "title": "About Cartoview"
        }, 
        {
            "location": "/keys/", 
            "text": "Cartoview\n\n\nKey Features\n\n\nApp Market\n for GIS Web Application\nOnce you install GeoNode and CartoView you will be be able to install GIS applications directly from the browser\n\n\nCartoView levereages the data management and security infrastructures of \nGeoNode\n to deploy and serve GIS applications\n\n\nDevelopers create applications and deploy them on the \nApp Market\n\n\nOnce the app is deployed it will become available to all Cartoview deployments", 
            "title": "Key Features"
        }, 
        {
            "location": "/keys/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/keys/#key-features", 
            "text": "App Market  for GIS Web Application\nOnce you install GeoNode and CartoView you will be be able to install GIS applications directly from the browser  CartoView levereages the data management and security infrastructures of  GeoNode  to deploy and serve GIS applications  Developers create applications and deploy them on the  App Market  Once the app is deployed it will become available to all Cartoview deployments", 
            "title": "Key Features"
        }, 
        {
            "location": "/demo/", 
            "text": "Cartoview\n\n\nDemos\n\n\nYou can take cartoview for a test \nhere\n\n\nCreate your account, load some test data and start authoring web mapping applicaitons", 
            "title": "Demos"
        }, 
        {
            "location": "/demo/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/demo/#demos", 
            "text": "You can take cartoview for a test  here  Create your account, load some test data and start authoring web mapping applicaitons", 
            "title": "Demos"
        }, 
        {
            "location": "/installation_ubuntu/", 
            "text": "Cartoview\n\n\nThis document describes the installation of cartview with geonode Version 2.6.1\n\n\n\n\nWarning\n\n\nin case of other versions of geonode these steps will not apply .\n\n\n\n\nInstallation Requirements\n\n\n\n\n\n\nInstall \nPython2.7\n\n\n\n\n\n\nInstall Django\n\n1\n2\nsudo apt-get update\nsudo apt-get install python-django\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nfor more information on installation visit \n1.8.7 \n= Django \n1.9a0\n\n\n\n\n\n\nDocker users\n\n\n\n\nyou need to install \ndocker-compose\n\n\n\n\n\n\nInstall On Ubuntu linux\n\n\n\n\nRun the following command to download required packages  \n1\n2\n sudo apt-get update\n sudo apt-get install python-virtualenv python-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev libjpeg-dev libpq-dev libgdal-dev git default-jdk\n\n\n\n\n\n\n\n\n\n\nDatabase Installation\n\n\n\n\n\n\ninstall postgreSQL database\n    \n1\nsudo apt-get install postgresql postgresql-contrib\n\n\n\n\n\n\n\n\n\ninstall postgis ( extension to support geographic objects allowing location queries to be run in SQL. )\n\n\n1\nsudo apt-get install postgis\n\n\n\n\n\n\n\n\n\n\n\n\nNote\nyou can install pgadmin ( postgreSQL GUI tool using ): \nsudo apt-get install pgadmin3\n\n\n\n\n\n\n\n\nNote\nfor more Information on postgreSQL visit \npostgresql\n\n\n\n\n\n\nDatabase Configuration\n\n\n\n\nyou will need to log into a user called postgres created by the installation to manage the database\n \n1\nsudo -i -u postgres\n\n\n\n\n\nchange the postgres password\n \n1\n2\npsql\n\\password\n\n\n\n\n\nExit out of the PostgreSQL prompt by typing\n \n1\n\\q\n\n\n\n\n\ncreate two new databases cartoView and cartoview_datastore\n \n1\n2\ncreatedb cartoview\ncreatedb cartoview_datastore\n\n\n\n\n\n\n\n\n\nNote\n\n\nyou can change the databases name but make sure to change thier names in the local_settings.py file in cartoview project directory\n\n\n\n\n\n\nadd postgis extension to the created databases\n\n\n\n\n1\n2\npsql \ndatabase-name\n\nCREATE EXTENSION postgis;\n\n\n\n\n\n\n\n\nNote\n\n\nfor more information on configuring the postgresql visit \npostgreSQL\n\n\n\n\ninstall Geoserver\n\n\n\n\nInstall Java 8 (needed by latest GeoServer 2.9)\n\n1\n2\n3\nsudo apt-add-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n\n\n\n\n\n\n\n1) Download  \ntomcat v9\n\n\n2) Extract the tar folder and rename to tomcat\n\n\n3) Download Geoserver war file \nhere\n\n\n4) Rename the war file to geoserver.war\n\n\n5) Copy the war file inside webapps directory in tomcat\n\n\n6) Create tomcat user we will do this by editing the tomcat-users.xml file:\n\n\n1\n        sudo nano path/to/tomcat/conf/tomcat-users.xml\n\n\n\n\n\n\n\n\nNote\n\n\nmake sure to change path/to/tomcat in the previous command with your tomcat path\n\n\n\n\n7) Paste the following line\n\nuser username=\"admin\" password=\"password\"roles=\"manager-gui,admin-gui\"/\n\njust before \n/tomcat-users \n\nat the end of the file and change the username and password\n\n\n8) Edit context files in host-manager directory\n\n\n1\n sudo nano path/to/tomcat/webapps/host-manager/META-INF/context.xml\n\n\n\n\n\n\n9) Comment the line \nValve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n         allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /\n by changing it to\n                 \n!--\nValve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n                                 allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /\n--\n\n\n10) Edit context files in manager directory\n\n\n1\nsudo nano path/to/tomcat/webapps/manager/META-INF/context.xml\n\n\n\n\n\n\n11) Comment the line \nValve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n        allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /\n  by changing it to\n                \n!--\nValve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n                                allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /\n--\n  \n\n\n\n\nstart tomcat server\n\n\n\n\nsh path/to/your/tomcat/bin/startup.sh\n\n\n\n\n\n\n\n\nNote\n\n  For more information on installation and Configuration of tomcat visit \ntomcat\n\n\n\n\n\n\n\n\nImportant\n\ncartview must be up and running\n\n\n\n\n\n\n\n\nImportant\n\n\nin Production Configure Geoserver before uploading layers from \nhere\n\n\n\n\n\n\n\n\nGeonode 2.6.1 Installation\n\n\n\n\n\n\nFollow these setps if you don't have Geonode  installed on your ubuntu system.\n\n\n\n\n\n\nCreate and activate the python virtual environment\n\n\n1\n2\nvirtualenv \nyour_virtual_env_name\n\nsource \nyour_virtual_env_name\n/bin/activate\n\n\n\n\n\n\n\n\n\n\ninstall pip ( a package management system used install and manage software packages written in Python )\n\n\n1\nsudo apt-get install python-pip\n\n\n\n\n\n\n\n\n\n\ninstall geonode 2.6.1\n\n\n1\n2\npip install geonode==2.6.1\nsudo apt-get install python-gdal\n\n\n\n\n\n\n\n\n\n\nCreate a symbolic link of osgeo in your virtualenv needed by gdal to run properly  \n\n\n1\nln -s /usr/lib/python2.7/dist-packages/osgeo  \nyour_virtual_env_name\n/lib/python2.7/site-packages/osgeo\n\n\n\n\n\n\n\n\n\n\n\n\nNote\nVerify your installation is completed by adding any layer in \nGeonode\n\n\n\n\n\n\n\n\nDon't Forget \nInstallation requirements\n\n\n\n\nCartoView Libraries Installation\n\n\n\n\n\n\ninstall cartview\n\n\npip install cartoview\n\n\n\n\n\n\nInstall CartoView_Django Project\n\n\nsh\ndjango-admin.py startproject --template=https://github.com/cartologic/cartoview-project-template/archive/master.zip --name django.env,uwsgi.ini,.bowerrc,server.py \nyour_project_name\n\n\n\n\n\n\nGo to your Project Folder\n\n\nsh\ncd \nyour_project_name\n\n\n\n\n\n\nDetect changes in \napp_manager\n App\n\n\nsh\npython manage.py makemigrations app_manager\n\n\n\n\n\n\ncreate account Table\n\n\nsh\npython manage.py migrate account\n\n\n\n\n\n\nCreate Rest of tables :\n\n\nsh\npython manage.py migrate\n\n\n\n\n\n\nload default User\n\n\nsh\npython manage.py loaddata sample_admin.json\n\n\n\n\n\n\nload default oauth app\n\n\nsh\npython manage.py loaddata json/default_oauth_apps.json\n\n\n\n\n\n\nTest Server (Development)\n\n\n\n\n\n\nTo start Development Server run this Command :\n\n\nsh\npython manage.py runserver 0.0.0.0:8000\n\n\n\n\n\n\n\n\n\n\n\n\nInfo\n\n\n(Optional)\n if want to override any settings variable  (for example to change the\n  database password ,name or hostname ) rename\nlocal_settings.py.sample\n to \nlocal_settings.py\n then override settings you want inside \nlocal_settings.py\n\n\n\n\n\n\nWarning\n\n\nDon't Forget to Change \nyour_project_name\n to desired name.\n\n\n\n\n\n\nApps From Geo App Market\n\n\n\n\n\n\nto Install apps from \nGeo App Market\n\n\n\n\n\n\nLoad Default Store\n\n\nsh\npython manage.py loaddata app_stores.json\n\n\n\n\n\n\nInstall \nnodejs\n and then install \nbower\n we need them to install app_manager dependencies\n\n\n\n\nin this step we will install required files in your project folder type :\n    \nsh\n    bower install\n\n\nCollect Required files type:\n    \nsh\n    python manage.py collectstatic --noinput\n\n\nNow you Can Install Apps from \nGeo App Market\n\n\nGo to \napps\n tab and click \nmanage apps\n Button and install app you want\n\n\n\n\n\n\nDeployment notes\n\n\n\n\n\n\n\n\nImportant\n\nin Production Configure Geoserver before uploading layers from \nhere\n\n\n\n\n\n\n\n\nImportant\n\n\nOnce CartoView is installed is expected to install all apps from the app store automatically\nAt the moment CartoView will fully support apache server only\nFor nginx deployments, CartoView will be able to detect new apps and get the updates, how ever to apply the updates, web server restart will be required to complete        the process\nCartoView will not be able to restart nginx when new apps are installed.\nAfter you install or update apps from the app manager page you will need to restart nginx manually until this issue is addressed in the future\n\n\n\n\nfollow these steps to get apps working on nginx\n\n\ncollect static files using this commands\n    \nsh\n    python manage.py collectstatic --noinput\n\n\nrestart server now you should restart server after installing any app", 
            "title": "Installation - ubuntu"
        }, 
        {
            "location": "/installation_ubuntu/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/installation_ubuntu/#this-document-describes-the-installation-of-cartview-with-geonode-version-261", 
            "text": "Warning  in case of other versions of geonode these steps will not apply .", 
            "title": "This document describes the installation of cartview with geonode Version 2.6.1"
        }, 
        {
            "location": "/installation_ubuntu/#installation-requirements", 
            "text": "Install  Python2.7    Install Django 1\n2 sudo apt-get update\nsudo apt-get install python-django      Note  for more information on installation visit  1.8.7  = Django  1.9a0    Docker users   you need to install  docker-compose", 
            "title": "Installation Requirements"
        }, 
        {
            "location": "/installation_ubuntu/#install-on-ubuntu-linux", 
            "text": "Run the following command to download required packages   1\n2  sudo apt-get update\n sudo apt-get install python-virtualenv python-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev libjpeg-dev libpq-dev libgdal-dev git default-jdk", 
            "title": "Install On Ubuntu linux"
        }, 
        {
            "location": "/installation_ubuntu/#database-installation", 
            "text": "install postgreSQL database\n     1 sudo apt-get install postgresql postgresql-contrib     install postgis ( extension to support geographic objects allowing location queries to be run in SQL. )  1 sudo apt-get install postgis      Note you can install pgadmin ( postgreSQL GUI tool using ):  sudo apt-get install pgadmin3     Note for more Information on postgreSQL visit  postgresql", 
            "title": "Database Installation"
        }, 
        {
            "location": "/installation_ubuntu/#database-configuration", 
            "text": "you will need to log into a user called postgres created by the installation to manage the database\n  1 sudo -i -u postgres   change the postgres password\n  1\n2 psql\n\\password   Exit out of the PostgreSQL prompt by typing\n  1 \\q   create two new databases cartoView and cartoview_datastore\n  1\n2 createdb cartoview\ncreatedb cartoview_datastore     Note  you can change the databases name but make sure to change thier names in the local_settings.py file in cartoview project directory    add postgis extension to the created databases   1\n2 psql  database-name \nCREATE EXTENSION postgis;    Note  for more information on configuring the postgresql visit  postgreSQL", 
            "title": "Database Configuration"
        }, 
        {
            "location": "/installation_ubuntu/#install-geoserver", 
            "text": "Install Java 8 (needed by latest GeoServer 2.9) 1\n2\n3 sudo apt-add-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer    1) Download   tomcat v9  2) Extract the tar folder and rename to tomcat  3) Download Geoserver war file  here  4) Rename the war file to geoserver.war  5) Copy the war file inside webapps directory in tomcat  6) Create tomcat user we will do this by editing the tomcat-users.xml file:  1         sudo nano path/to/tomcat/conf/tomcat-users.xml    Note  make sure to change path/to/tomcat in the previous command with your tomcat path   7) Paste the following line user username=\"admin\" password=\"password\"roles=\"manager-gui,admin-gui\"/ \njust before  /tomcat-users  \nat the end of the file and change the username and password  8) Edit context files in host-manager directory  1  sudo nano path/to/tomcat/webapps/host-manager/META-INF/context.xml   9) Comment the line  Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n         allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /  by changing it to\n                  !-- Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n                                 allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" / --  10) Edit context files in manager directory  1 sudo nano path/to/tomcat/webapps/manager/META-INF/context.xml   11) Comment the line  Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n        allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" /   by changing it to\n                 !-- Valve className=\"org.apache.catalina.valves.RemoteAddrValve\"\n                                allow=\"127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1\" / --      start tomcat server   sh path/to/your/tomcat/bin/startup.sh     Note \n  For more information on installation and Configuration of tomcat visit  tomcat     Important \ncartview must be up and running     Important  in Production Configure Geoserver before uploading layers from  here", 
            "title": "install Geoserver"
        }, 
        {
            "location": "/installation_ubuntu/#geonode-261-installation", 
            "text": "Follow these setps if you don't have Geonode  installed on your ubuntu system.    Create and activate the python virtual environment  1\n2 virtualenv  your_virtual_env_name \nsource  your_virtual_env_name /bin/activate     install pip ( a package management system used install and manage software packages written in Python )  1 sudo apt-get install python-pip     install geonode 2.6.1  1\n2 pip install geonode==2.6.1\nsudo apt-get install python-gdal     Create a symbolic link of osgeo in your virtualenv needed by gdal to run properly    1 ln -s /usr/lib/python2.7/dist-packages/osgeo   your_virtual_env_name /lib/python2.7/site-packages/osgeo      Note Verify your installation is completed by adding any layer in  Geonode     Don't Forget  Installation requirements", 
            "title": "Geonode 2.6.1 Installation"
        }, 
        {
            "location": "/installation_ubuntu/#cartoview-libraries-installation", 
            "text": "install cartview  pip install cartoview    Install CartoView_Django Project  sh\ndjango-admin.py startproject --template=https://github.com/cartologic/cartoview-project-template/archive/master.zip --name django.env,uwsgi.ini,.bowerrc,server.py  your_project_name    Go to your Project Folder  sh\ncd  your_project_name    Detect changes in  app_manager  App  sh\npython manage.py makemigrations app_manager    create account Table  sh\npython manage.py migrate account    Create Rest of tables :  sh\npython manage.py migrate    load default User  sh\npython manage.py loaddata sample_admin.json    load default oauth app  sh\npython manage.py loaddata json/default_oauth_apps.json    Test Server (Development)    To start Development Server run this Command :  sh\npython manage.py runserver 0.0.0.0:8000       Info  (Optional)  if want to override any settings variable  (for example to change the\n  database password ,name or hostname ) rename local_settings.py.sample  to  local_settings.py  then override settings you want inside  local_settings.py    Warning  Don't Forget to Change  your_project_name  to desired name.    Apps From Geo App Market    to Install apps from  Geo App Market    Load Default Store  sh\npython manage.py loaddata app_stores.json    Install  nodejs  and then install  bower  we need them to install app_manager dependencies   in this step we will install required files in your project folder type :\n     sh\n    bower install  Collect Required files type:\n     sh\n    python manage.py collectstatic --noinput  Now you Can Install Apps from  Geo App Market  Go to  apps  tab and click  manage apps  Button and install app you want", 
            "title": "CartoView Libraries Installation"
        }, 
        {
            "location": "/installation_ubuntu/#deployment-notes", 
            "text": "Important \nin Production Configure Geoserver before uploading layers from  here     Important  Once CartoView is installed is expected to install all apps from the app store automatically\nAt the moment CartoView will fully support apache server only\nFor nginx deployments, CartoView will be able to detect new apps and get the updates, how ever to apply the updates, web server restart will be required to complete        the process\nCartoView will not be able to restart nginx when new apps are installed.\nAfter you install or update apps from the app manager page you will need to restart nginx manually until this issue is addressed in the future   follow these steps to get apps working on nginx  collect static files using this commands\n     sh\n    python manage.py collectstatic --noinput  restart server now you should restart server after installing any app", 
            "title": "Deployment notes"
        }, 
        {
            "location": "/installation_windows/", 
            "text": "Cartoview\n\n\nThis document describes the installation of cartview with geonode Version 2.6.1 on windows\n\n\nInstall On Windows\n\n\n\n\nInstall \nPython2.7\n\n\nMake Sure to add the Python in the Path, as this is not setup by default\n\n\ncheck add python.exe to PATH\n    \n\n    \n\n\n\n\n\n\n\n\nInstall Django 1.8.7 open cmd and type:\n\n\n1\npip install \ndjango\n==\n1\n.8.7\n\n\n\n\n\n\n\n\n\n\nWe recommend to use Docker\n\n\n\n\nFollow \nDocker Instructions\n\n\n\n\nExisting GeoNode Users\n\n\nCheck GeoNode and Cartoview version compatibility in \nPYPI\n then install Cartoview\n\n\n\n\n\n\nRequirements:\n\n\n\n\nGeoNode == 2.5.15\n\n\n\n\n\n\nAttention\n\n\nWe will Support more version of Geonode Soon!!\n\n\n\n\n\n\n\n\ninstall cartoview libraries\n\n\n1\npip install \ncartoview\n \n==\n \nversion\n\n\n\n\n\n\n\n\n\n\n\nCreate Cartoview Project\n\n\n1\ndjango-admin.py startproject --template\n=\nhttps://github.com/cartologic/cartoview-project-template/archive/master.zip --name django.env,uwsgi.ini,.bowerrc \nyour_project_name\n\n\n\n\n\n\n\n\n\n\n\nGo to your Project Folder\n\n\n1\ncd\n \nyour_project_name\n\n\n\n\n\n\n\n\n\n\n\ndetect Changes in app_manager\n\n\n1\npython manage.py makemigrations app_manager\n\n\n\n\n\n\n\n\n\n\ncreate account table\n\n\n1\npython manage.py migrate account\n\n\n\n\n\n\n\n\n\n\ncreate rest of database tables\n    \n1\npython manage.py migrate\n\n\n\n\n\n\n\n\n\nCollect static Files\n\n\n1\npython manage.py collectstatic --noinput\n\n\n\n\n\n\n\n\n\n\nNow Development Server :\n    \n1\npython manage.py runserver \n0\n.0.0.0:8000\n\n\n\n\n\n\n\n\n\nDeployment notes\n\n\n\n\n\n\n\n\nImportant\n\nin Production Configure Geoserver before uploading layers from \nhere\n\n\n\n\n\n\n\n\nImportant\n\n\nOnce CartoView is installed is expected to install all apps from the app store automatically\nAt the moment CartoView will fully support apache server only\nFor nginx deployments, CartoView will be able to detect new apps and get the updates, how ever to apply the updates, web server restart will be required to complete        the process\nCartoView will not be able to restart nginx when new apps are installed.\nAfter you install or update apps from the app manager page you will need to restart nginx manually until this issue is addressed in the future\n\n\n\n\nfollow these steps to get apps working on nginx\n\n\ncollect static files using this commands\n    \n1\npython manage.py collectstatic --noinput\n\n\n\n\n\nrestart server now you should restart server after installing any app", 
            "title": "Installation - windows"
        }, 
        {
            "location": "/installation_windows/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/installation_windows/#this-document-describes-the-installation-of-cartview-with-geonode-version-261-on-windows", 
            "text": "", 
            "title": "This document describes the installation of cartview with geonode Version 2.6.1 on windows"
        }, 
        {
            "location": "/installation_windows/#install-on-windows", 
            "text": "Install  Python2.7  Make Sure to add the Python in the Path, as this is not setup by default  check add python.exe to PATH\n     \n         Install Django 1.8.7 open cmd and type:  1 pip install  django == 1 .8.7     We recommend to use Docker   Follow  Docker Instructions", 
            "title": "Install On Windows"
        }, 
        {
            "location": "/installation_windows/#existing-geonode-users", 
            "text": "Check GeoNode and Cartoview version compatibility in  PYPI  then install Cartoview    Requirements:   GeoNode == 2.5.15    Attention  We will Support more version of Geonode Soon!!     install cartoview libraries  1 pip install  cartoview   ==   version      Create Cartoview Project  1 django-admin.py startproject --template = https://github.com/cartologic/cartoview-project-template/archive/master.zip --name django.env,uwsgi.ini,.bowerrc  your_project_name      Go to your Project Folder  1 cd   your_project_name      detect Changes in app_manager  1 python manage.py makemigrations app_manager     create account table  1 python manage.py migrate account     create rest of database tables\n     1 python manage.py migrate     Collect static Files  1 python manage.py collectstatic --noinput     Now Development Server :\n     1 python manage.py runserver  0 .0.0.0:8000", 
            "title": "Existing GeoNode Users"
        }, 
        {
            "location": "/installation_windows/#deployment-notes", 
            "text": "Important \nin Production Configure Geoserver before uploading layers from  here     Important  Once CartoView is installed is expected to install all apps from the app store automatically\nAt the moment CartoView will fully support apache server only\nFor nginx deployments, CartoView will be able to detect new apps and get the updates, how ever to apply the updates, web server restart will be required to complete        the process\nCartoView will not be able to restart nginx when new apps are installed.\nAfter you install or update apps from the app manager page you will need to restart nginx manually until this issue is addressed in the future   follow these steps to get apps working on nginx  collect static files using this commands\n     1 python manage.py collectstatic --noinput   restart server now you should restart server after installing any app", 
            "title": "Deployment notes"
        }, 
        {
            "location": "/installation_docker/", 
            "text": "Cartoview\n\n\nDocker\n\n\n\n\nbe sure you installed all \nrequirements\n\n\nInstall \nDocker\n\n\nFor Windows User install \nmake\n by\n\n\ninstalling \nMSYS2\n\n\nopen msys shell and install \nmake\n using this command \npacman -S make\n\n\nadd \nmsys_path\n\\usr\\bin\n to \nPATH\n envirnment variable\n\n\n\n\n\n\nfor windows users please use \nDocker Quickstart Terminal\n to execute the following commands\n\n\n\n\nCreate Cartoview Project which contains required files to run and configure Docker using this command:\n\n\n1\ndjango\n-\nadmin\n.\npy\n \nstartproject\n \n--\ntemplate\n=\nhttps\n:\n//\ngithub\n.\ncom\n/\ncartologic\n/\ncartoview\n-\nproject\n-\ntemplate\n/\narchive\n/\nmaster\n.\nzip\n \n--\nname\n \ndjango\n.\nenv\n,\nuwsgi\n.\nini\n,\n.\nbowerrc\n,\nserver\n.\npy\n \nyour_project_name\n\n\n\n\n\n\n\n\n\n\n\nReplace \nyour_project_name\n with the desired name\n\n\n\n\n\n\nGo to your project Folder\n\n\n1\ncd\n \nyour_project_name\n\n\n\n\n\n\n\n\n\n\n\nOpen \ndocker-compose.yml\n and Look at the port numbers for GeoServer and Postges and change the number before the \n:\n this will be the port on your machine\n\n\n\n\nTips\n\n\nany file with \n.env\n EXTENSION Is a file that contains environment variables passed to specific container for example \ndjango.env\n file contains environment variables passed to Cartoview container so django can read these variables and use them\n\n\ndefault database username: \ncartologic\n and password: \nroot\n\n\ndefault database user in \npostgis.env\n file in your project if want to change it.\n\n\nIf you want to run this project with a domain :\n\n\nchange \ndjango.env\n(this is the file of the common django setting variables) file in your Project Folder to be some thing like this:\n    \n1\n2\n3\n4\n5\nDATABASE_URL\n=\npostgres\n:\n//\ndatabase_user_name\n:\ndatabase_password\n@postgis\n:\n5432\n/\ncartoview\n\n\nGEOSERVER_PUBLIC_LOCATION\n=\nhttp\n:\n//\nyour_domain_or_ip\n/\ngeoserver\n/\n\n\nGEOSERVER_LOCATION\n=\nhttp\n:\n//\ngeoserver\n:\n8080\n/\ngeoserver\n/\n\n\nSITEURL\n=\nhttp\n:\n//\nyour_domain_or_ip\n\n\nALLOWED_HOSTS\n=\n[\n*\n]\n\n\n\n\n\n\n\n\n\n\nFor windows users the default IP aasigned to docker is : \n192.168.99.100\n so the default django.env file must be some thing like this:\n    \n1\n2\n3\n4\n5\nDATABASE_URL\n=\npostgres\n:\n//\ndatabase_user_name\n:\ndatabase_password\n@postgis\n:\n5432\n/\ncartoview\n\n\nGEOSERVER_PUBLIC_LOCATION\n=\nhttp\n:\n//\n192.168\n.\n99.100\n/\ngeoserver\n/\n\n\nGEOSERVER_LOCATION\n=\nhttp\n:\n//\ngeoserver\n:\n8080\n/\ngeoserver\n/\n\n\nSITEURL\n=\nhttp\n:\n//\n192.168\n.\n99.100\n\n\nALLOWED_HOSTS\n=\n[\n*\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\nFor windows Users Please Comment volumes lines of postgis Container only in \ndocker-compose.yml\n by preceding the line with \n#\n something like this:\n    \n1\n2\n    \n#   volumes:\n\n    \n#      - pgdata:/var/lib/postgresql\n\n\n\n\n\n\nif \ndjango-admin.py\n not working try \ndjango-admin\n\n\n\n\n\n\n\n\n\n\nStart Docker images(cartoview,geoserver,postgres) type :\n\n\n1\nmake run\n\n\n\n\n\n\n\n\nSuccess\n\n\nNow you can Access cartoview on \nhttp://localhost\n or \nhttp://\nyour_domain_or_ip\n\n\n\n\n\n\nImportant\n\n\nFinal step Configure Geoserver before uploading layers from \nhere\n\n\n\n\n\n\n\n\nDeployment notes\n\n\n\n\n\n\n\n\nImportant\n\nOnce CartoView is installed is expected to install all apps from the app store automatically\nCartoView will not be able to restart docker when new apps install.\nAfter you install any new app or app update you will need to restart docker manually until this issue is addressed in the future\n\n\nfollow these steps to get apps working on nginx\n\n\ncollect static files using this commands in your project folder\n    \n1\nmake collect_static\n\n\n\n\n\nrestart server now with the following command you should restart server after installing any app\n    \n1\ndocker-compose restart cartoview\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWindows Issues\n\n\n\n\nDocker volumes have some issues  with windows so you have to backup your postgres database.\n\n\n\n\nDocker on Linux\n\n\n\n\nyou will Find all postgres data in pgdata folder", 
            "title": "Installation - docker"
        }, 
        {
            "location": "/installation_docker/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/installation_docker/#docker", 
            "text": "be sure you installed all  requirements  Install  Docker  For Windows User install  make  by  installing  MSYS2  open msys shell and install  make  using this command  pacman -S make  add  msys_path \\usr\\bin  to  PATH  envirnment variable    for windows users please use  Docker Quickstart Terminal  to execute the following commands   Create Cartoview Project which contains required files to run and configure Docker using this command:  1 django - admin . py   startproject   -- template = https : // github . com / cartologic / cartoview - project - template / archive / master . zip   -- name   django . env , uwsgi . ini , . bowerrc , server . py   your_project_name      Replace  your_project_name  with the desired name    Go to your project Folder  1 cd   your_project_name      Open  docker-compose.yml  and Look at the port numbers for GeoServer and Postges and change the number before the  :  this will be the port on your machine   Tips  any file with  .env  EXTENSION Is a file that contains environment variables passed to specific container for example  django.env  file contains environment variables passed to Cartoview container so django can read these variables and use them  default database username:  cartologic  and password:  root  default database user in  postgis.env  file in your project if want to change it.  If you want to run this project with a domain :  change  django.env (this is the file of the common django setting variables) file in your Project Folder to be some thing like this:\n     1\n2\n3\n4\n5 DATABASE_URL = postgres : // database_user_name : database_password @postgis : 5432 / cartoview  GEOSERVER_PUBLIC_LOCATION = http : // your_domain_or_ip / geoserver /  GEOSERVER_LOCATION = http : // geoserver : 8080 / geoserver /  SITEURL = http : // your_domain_or_ip  ALLOWED_HOSTS = [ * ]      For windows users the default IP aasigned to docker is :  192.168.99.100  so the default django.env file must be some thing like this:\n     1\n2\n3\n4\n5 DATABASE_URL = postgres : // database_user_name : database_password @postgis : 5432 / cartoview  GEOSERVER_PUBLIC_LOCATION = http : // 192.168 . 99.100 / geoserver /  GEOSERVER_LOCATION = http : // geoserver : 8080 / geoserver /  SITEURL = http : // 192.168 . 99.100  ALLOWED_HOSTS = [ * ]        Warning   For windows Users Please Comment volumes lines of postgis Container only in  docker-compose.yml  by preceding the line with  #  something like this:\n     1\n2      #   volumes: \n     #      - pgdata:/var/lib/postgresql    if  django-admin.py  not working try  django-admin      Start Docker images(cartoview,geoserver,postgres) type :  1 make run    Success  Now you can Access cartoview on  http://localhost  or  http:// your_domain_or_ip    Important  Final step Configure Geoserver before uploading layers from  here", 
            "title": "Docker"
        }, 
        {
            "location": "/installation_docker/#deployment-notes", 
            "text": "Important \nOnce CartoView is installed is expected to install all apps from the app store automatically\nCartoView will not be able to restart docker when new apps install.\nAfter you install any new app or app update you will need to restart docker manually until this issue is addressed in the future  follow these steps to get apps working on nginx  collect static files using this commands in your project folder\n     1 make collect_static   restart server now with the following command you should restart server after installing any app\n     1 docker-compose restart cartoview", 
            "title": "Deployment notes"
        }, 
        {
            "location": "/installation_docker/#windows-issues", 
            "text": "Docker volumes have some issues  with windows so you have to backup your postgres database.", 
            "title": "Windows Issues"
        }, 
        {
            "location": "/installation_docker/#docker-on-linux", 
            "text": "you will Find all postgres data in pgdata folder", 
            "title": "Docker on Linux"
        }, 
        {
            "location": "/installation_vagrant/", 
            "text": "No available yet!!", 
            "title": "Installation - vagrant"
        }, 
        {
            "location": "/installation_vagrant/#no-available-yet", 
            "text": "", 
            "title": "No available yet!!"
        }, 
        {
            "location": "/market/", 
            "text": "Warning\n\n\nthis steps works only if Cartoview up and running\n\n\n\n\n\n\nto Install apps from \nGeo App Market\n Follow these steps\n\n\nGo to \napps\n tab and click \nmanage apps\n Button and install app you want\n    \n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nRestart the sever after installing the required Apps", 
            "title": "Install App"
        }, 
        {
            "location": "/developers/", 
            "text": "Cartoview\n\n\nFor Developers\n\n\n\n\n\n\nCartoview Provides a \nGeoApp Market\n for GIS Developers.\n\n\n\n\n\n\nDevelope your own App\n\n\n\n\n\n\nCreate a new empty app from cartoview app template as follow in your cartoview project directory inside\n\n1\n2\ncd\n \napps\n\n\ndjango\n-\nadmin\n.\npy\n \nstartapp\n \n--\ntemplate\n=\nhttps\n:\n//\ngithub\n.\ncom\n/\ncartologic\n/\ncartoview\n-\napp\n-\ntemplate\n/\narchive\n/\nmaster\n.\nzip\n \nyour_App_name\n\n\n\n\n\n\n\n\n\n\nEdit cartoview_project/apps/apps.yml and add entry for your app or create apps.yml file if not found and add the following lines\n\n1\n2\n3\n- name: \napp_name\n\n  active: true\n  order: 0\n\n\n\n\n\n\n\nAdd stores using the following command inside the cartview project directory\n\n1\npython manage.py loaddata app_stores.json\n\n\n\n\n\n\n\nAdd the App to the database form django admin interface\n\n\n\n\n\n\n\n\nDon't forget to check Single instace option if u want to test it for the first time\n\n\n\n\n\n\n\n\nNow on Cartoview in Apps tab your app will Appear Some thing like this\n\n\n\n\n\n\n\n\nClick Explore Button will open App home page\n\n\n\n\n\n\n\n\n\n\nSuccess\n\n\nCongratulations, now you have created your first App on cartoview\n    you can upload it to cartoview App market to make use of the features\n    provided by cartoview App market", 
            "title": "Developers"
        }, 
        {
            "location": "/developers/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/developers/#for-developers", 
            "text": "Cartoview Provides a  GeoApp Market  for GIS Developers.    Develope your own App    Create a new empty app from cartoview app template as follow in your cartoview project directory inside 1\n2 cd   apps  django - admin . py   startapp   -- template = https : // github . com / cartologic / cartoview - app - template / archive / master . zip   your_App_name      Edit cartoview_project/apps/apps.yml and add entry for your app or create apps.yml file if not found and add the following lines 1\n2\n3 - name:  app_name \n  active: true\n  order: 0    Add stores using the following command inside the cartview project directory 1 python manage.py loaddata app_stores.json    Add the App to the database form django admin interface     Don't forget to check Single instace option if u want to test it for the first time     Now on Cartoview in Apps tab your app will Appear Some thing like this     Click Explore Button will open App home page      Success  Congratulations, now you have created your first App on cartoview\n    you can upload it to cartoview App market to make use of the features\n    provided by cartoview App market", 
            "title": "For Developers"
        }, 
        {
            "location": "/upload_to_app_market/", 
            "text": "Upload to Cartoview App Market\n\n\n\n\nAfter creating your app as mention in \ncreate app section\n, you can upload your app to Carotview App Market to be shared with  cartoview community\nand to make use of the features provided by cartview.\nthe following steps shows in details how to upload app on cartoview app market\n \n\n1) To upload your App visit \ncartoview App Market\n\n\n\n\n2) Login with google, twitter or github\n\n\n\n3) After login you will need to fill your info to submit apps\n\n\n\n\n\n\n4) Now you can submit Apps\n\n\n\n5) fill the application information\n\n\n\n\n\n\n\n\nNote\n\n\nyou need to upload app package as zipped folder \n\n\n\n\n6) After submitting your app it will need approval, after approval the status will change to approved\n\n\n\n7) after approval you will find your app on Cartoview App Market", 
            "title": "Upload App to App Market"
        }, 
        {
            "location": "/upload_to_app_market/#upload-to-cartoview-app-market", 
            "text": "After creating your app as mention in  create app section , you can upload your app to Carotview App Market to be shared with  cartoview community\nand to make use of the features provided by cartview.\nthe following steps shows in details how to upload app on cartoview app market\n  \n1) To upload your App visit  cartoview App Market   2) Login with google, twitter or github  3) After login you will need to fill your info to submit apps    4) Now you can submit Apps  5) fill the application information     Note  you need to upload app package as zipped folder    6) After submitting your app it will need approval, after approval the status will change to approved  7) after approval you will find your app on Cartoview App Market", 
            "title": "Upload to Cartoview App Market"
        }, 
        {
            "location": "/contrib/", 
            "text": "Cartoview\n\n\nContributing to CartoView\n\n\nPlease refer to each project's style guidelines and guidelines for submitting patches and additions. In general, we follow the \"fork-and-pull\" Git workflow.\n\n\n\n\nFork the repo on GitHub\n\n\nClone the project to your own machine\n\n\nCommit changes to your own branch\n\n\nPush your work back up to your fork\n\n\nSubmit a Pull request so that we can review your changes\n\n\n\n\n\n\nNote\n\n\nBe sure to merge the latest from \"upstream\" before making a pull request!", 
            "title": "Contribute"
        }, 
        {
            "location": "/contrib/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/contrib/#contributing-to-cartoview", 
            "text": "Please refer to each project's style guidelines and guidelines for submitting patches and additions. In general, we follow the \"fork-and-pull\" Git workflow.   Fork the repo on GitHub  Clone the project to your own machine  Commit changes to your own branch  Push your work back up to your fork  Submit a Pull request so that we can review your changes    Note  Be sure to merge the latest from \"upstream\" before making a pull request!", 
            "title": "Contributing to CartoView"
        }, 
        {
            "location": "/QA/", 
            "text": "Cartoview\n\n\nFrequently Asked Questions\n\n\n\n\n\n\nWhat exactly is CartoView? Is it a replacement for GeoNode?\n\n\n\n\nCartoView is \nGeo App market\n for GeoNode. It is not a fork / improvement / reprlacement of Geonode, but rather additional code aimed at making it more extensible to integrate third party apps directly from the browser.\n\n\n\n\n\n\n\n\nWhat are the goals of Cartoview?\n\n\n\n\nSharing GIS Apps\n\n\nProvide apps for common tasks like visualizing and querying feature services.\n\n\nExtend the functions of the GeoNode SDI beyond data management\n\n\nProvide a solid core of utilities that can be used to help developers integrate and deploy their Geo apps\n\n\nFoster an ecosystem of apps extending easily deplyable and installable\n\n\n\n\n\n\n\n\nCan I use CartoView with GeoNode Version 2.4 and earlier?\n\n\n\n\nCartoView starts working with GeoNode 2.6\n\n\n\n\n\n\n\n\nI have an idea! What should I do?\n\n\n\n\nPlease file an issue. \nIssues\n are a great way to discuss new ideas, build consensus and talk about implementation details.\n\n\n\n\n\n\n\n\nI built something with cartoview can I show you?\n\n\n\n\nAbsolutely! Share it on twitter with \n@ahmednosman\n , \n@cartoview\n. You can add your project to the list in the readme too.\n\n\n\n\n\n\n\n\nI built a reusable app  can I contribute it?\n\n\n\n\nOfcourse. This is the purpose of Cartoview. Read the instructions on developing and deploying apps. Create an account on cartoview.org and load your app. Your app will be immediately available to all Cartoview deployments\n\n\n\n\n\n\n\n\nWhat are some good CartoView Apps?\n\n\n\n\nSimple Map Viewer\n : This app allows the creation of html mobile ready viewer app with most basic features.\n\n\nFeature Detailed Viewer\n : A map and list applications for store locations or similar usage\n\n\nWebApp Builder\n : A customizable GIS\n\n\n\n\n\n\n\n\nRunning CartoView on GeoNode and QGIS Server?\n\n\n\n\nThere is no reason for Cartoview not to work on this deployment. (This was never tested). Apps relying on GeoServer ofcourse will not work", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/QA/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/QA/#frequently-asked-questions", 
            "text": "", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/issues/", 
            "text": "Cartoview\n\n\nIssues\n\n\nIf something isn't working the way you expected, please take a look at \nprevious issues\n that resolve common problems first.\n\n\nHave you found a new bug? Want to request a new feature? We'd love to hear from you. Please let us know by submitting an issue.", 
            "title": "Issues"
        }, 
        {
            "location": "/issues/#cartoview", 
            "text": "", 
            "title": "Cartoview"
        }, 
        {
            "location": "/issues/#issues", 
            "text": "If something isn't working the way you expected, please take a look at  previous issues  that resolve common problems first.  Have you found a new bug? Want to request a new feature? We'd love to hear from you. Please let us know by submitting an issue.", 
            "title": "Issues"
        }
    ]
}